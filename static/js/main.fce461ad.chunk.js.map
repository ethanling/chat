{"version":3,"sources":["components/UsernameForm.js","components/MessageList.js","components/SendMessageForm.js","components/TypingIndicator.js","components/WhosOnlineList.js","components/Chatscreen.js","App.js","serviceWorker.js","index.js"],"names":["UsernameForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","onChange","bind","assertThisInitialized","onSubmit","e","setState","target","value","preventDefault","react_default","a","createElement","className","name","type","placeholder","React","Component","MessageList","formatDate","timestamp","pm","time","Date","minutes","getMinutes","hours","getHours","concat","_this2","messages","map","message","index","key","senderId","createdAt","text","SendMessageForm","TypingIndicator","usersWhoAreTyping","length","join","WhosOnlineList","users","user","presence","Chatscreen","currentUser","currentRoom","sendMessage","sendTypingEvent","roomId","id","isTypingIn","catch","error","console","process","APP_URL","PORT","Chatkit","ChatManager","instanceLocator","userId","currentUsername","tokenProvider","TokenProvider","url","connect","then","subscribeToRoom","messageLimit","hooks","onNewMessage","toConsumableArray","onUserStartedTyping","onUserStoppedTyping","filter","onUserCameOnline","forceUpdate","onUserWentOffline","onUserJoined","style","display","height","backgroundColor","components_WhosOnlineList","flex","width","components_MessageList","components_TypingIndicator","components_SendMessageForm","App","currentScreen","onUsernameSubmitted","fetch","method","headers","Content-Type","body","JSON","stringify","res","log","components_UsernameForm","components_Chatscreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fce461ad.chunk.js","sourcesContent":["import React from 'react';\n\nclass UsernameForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tusername: \"\"\n\t\t}\n\n\t\tthis.onChange = this.onChange.bind(this);\n\t\tthis.onSubmit = this.onSubmit.bind(this);\n\t}\n\n\tonChange(e) {\n\t\tthis.setState({\n\t\t\tusername: e.target.value\n\t\t})\n\t}\n\n\tonSubmit(e) {\n\t\te.preventDefault();\n\t\tthis.props.onSubmit(this.state.username);\n\t}\n\n\n\trender() {\n\t\treturn <div className=\"signin-container\">\n\t\t\t<div className=\"signin-form\">\n\t\t\t\t<h1>Login</h1>\n\t\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"input-box\"\n\t\t\t\t\t\tname=\"username\" \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tplaceholder=\"Username\" \n\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"input-box\"\n\t\t\t\t\t\tname=\"password\" \n\t\t\t\t\t\ttype=\"password\" \n\t\t\t\t\t\tplaceholder=\"Password\" \n\t\t\t\t\t/>\n\t\t\t\t\t<input className=\"submit-button\" type=\"submit\" />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t}\n}\n\nexport default UsernameForm;","import React from 'react';\n\nclass MessageList extends React.Component {\n\n\tconstructor() {\n\t\tsuper()\n\t\tthis.formatDate = this.formatDate.bind(this);\n\t}\n\n\tformatDate(timestamp) {\n\t\tlet time = new Date(timestamp);\n\t\tlet minutes = time.getMinutes();\n\t\tlet hours = time.getHours();\n\t\tlet pm;\n\t\tif (hours > 12) {\n\t\t\thours -= 12\n\t\t\tpm = true;\n\t\t};\n\t\tlet formatted = `${hours}:${minutes}${pm ? \"pm\" : \"am\"}`;\n\n\t\treturn formatted;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t{this.props.messages.map((message, index) => (\n\t\t\t\t\t<li key={index} className=\"message-container\">\n\t\t\t\t\t\t<div className=\"message\">\n\t\t\t\t\t\t\t<span className=\"message-user\">\n\t\t\t\t\t\t\t\t{message.senderId}\n\t\t\t\t\t\t\t\t<span className=\"message-time\">\n\t\t\t\t\t\t\t\t\t{this.formatDate(message.createdAt)}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<p>{message.text}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t)\n\t}\n}\n\nexport default MessageList;","import React from 'react';\n\nclass SendMessageForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttext: '',\n\t\t}\n\n\t\tthis.onChange = this.onChange.bind(this);\n\t\tthis.onSubmit = this.onSubmit.bind(this);\n\t}\n\n\tonChange(e) {\n\t\tthis.setState({\n\t\t\ttext: e.target.value\n\t\t})\n\t\tif (this.props.onChange) {\n\t\t\tthis.props.onChange();\n\t\t}\n\t}\n\n\tonSubmit(e) {\n\t\te.preventDefault();\n\t\tthis.props.onSubmit(this.state.text);\n\t\tthis.setState({ text: ''})\n\t}\n\n\n\trender() {\n\t\treturn <div className=\"message-form\">\n\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\t\t<input \n\t\t\t\t\tclassName=\"message-input\"\n\t\t\t\t\ttype=\"text\" \n\t\t\t\t\tplaceholder=\"What is your message?\" \n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\tvalue={this.state.text}\n\t\t\t\t/>\n\t\t\t\t<input type=\"submit\" className=\"message-send\"/>\n\t\t\t</form>\n\t\t</div>\n\t}\n}\n\nexport default SendMessageForm;","import React, { Component } from 'react';\n\nclass TypingIndicator extends Component {\n\trender() {\n\t\t\tif (this.props.usersWhoAreTyping.length === 0) {\n\t\t\t\treturn <p></p>\n\t\t\t} else if (this.props.usersWhoAreTyping.length === 1) {\n\t\t\t\treturn <p>{this.props.usersWhoAreTyping[0]} is typing ...</p>\n\t\t\t} else if (this.props.usersWhoAreTyping.length > 1) {\n\t\t\t\treturn <p>{this.props.usersWhoAreTyping.join(' and ')} are typing ...</p>\n\t\t\t}\n\t}\n}\n\nexport default TypingIndicator;","import React, { Component } from 'react';\n\nclass WhosOnlineList extends Component {\n\n\trender() {\n\t\tif (this.props.users) {\n\t\t\treturn (\n\t\t\t\t<ul className='user-list'>\n\t\t\t\t\t{this.props.users.map((user, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li className=\"user-list-item\" key={user.name}>\n\t\t\t\t\t\t\t\t<div className={user.presence.state === 'online' ? 'user-status user-online': 'user-status user-offline'}></div>\n\t\t\t\t\t\t\t\t<span className='user-list-name'>{user.name}</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"loader-container\">\n\t\t\t\t\t<div className='loader'></div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default WhosOnlineList;","import React from 'react';\nimport Chatkit from '@pusher/chatkit';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport TypingIndicator from './TypingIndicator';\nimport WhosOnlineList from './WhosOnlineList';\n\nclass Chatscreen extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentUser: {},\n            currentRoom: {},\n            usersWhoAreTyping: [],\n            messages: []\n        }\n        this.sendMessage = this.sendMessage.bind(this);\n        this.sendTypingEvent = this.sendTypingEvent.bind(this);\n    }\n\n    sendMessage(text) {\n        this.state.currentUser.sendMessage({\n            text,\n            roomId: this.state.currentRoom.id,\n        })\n    }\n\n    sendTypingEvent() {\n        this.state.currentUser\n            .isTypingIn({ roomId: this.state.currentRoom.id })\n            .catch(error => console.error(error))\n    }\n\n    componentDidMount() {\n\n        const appUrl = `${process.env.APP_URL}:${process.env.PORT}/authenticate`;\n\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: \"v1:us1:311aa8b8-2ce9-435a-b289-991ed13030e6\",\n            userId: this.props.currentUsername,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({ currentUser });\n                return currentUser.subscribeToRoom({\n                    roomId: 19375106,\n                    messageLimit: 100,\n                    hooks: {\n                        onNewMessage: message => {\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => { \n                            this.setState({\n                                usersWhoAreTyping: [...this.state.usersWhoAreTyping, user.name]\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                usersWhoAreTyping: this.state.usersWhoAreTyping.filter(username => username !== user.name)\n                            })\n                        },\n                        onUserCameOnline: () => this.forceUpdate(),\n                        onUserWentOffline: () => this.forceUpdate(),\n                        onUserJoined: () => this.forceUpdate(),\n                    }\n                })\n            })\n            .then(currentRoom => {\n                this.setState({ currentRoom })\n            })\n            .catch(error => console.error(error))\n    }\n\n    render() {\n        return (\n            <div style={{\n                display: 'flex',\n                height: '100vh',\n                backgroundColor: '#F8F8F9'\n            }}>\n                <div className=\"sidebar\">\n                    <WhosOnlineList users={this.state.currentRoom.users} />\n                </div>\n                \n                <div className=\"message-view\">\n                    <div style={{\n                        flex: 1,\n                        width: \"100%\"\n                    }}>\n                        <MessageList messages={this.state.messages}/>\n                    </div>\n                    \n                    <TypingIndicator usersWhoAreTyping={this.state.usersWhoAreTyping} />\n                    <SendMessageForm \n                        onSubmit={this.sendMessage} \n                        onChange={this.sendTypingEvent}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Chatscreen;","import React, { Component } from 'react';\nimport UsernameForm from './components/UsernameForm';\nimport Chatscreen from './components/Chatscreen';\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcurrentScreen: \"WhatIsYourUsernameScreen\",\n\t\t\tcurrentUsername: \"\"\n\t\t}\n\n\t\tthis.onUsernameSubmitted = this.onUsernameSubmitted.bind(this);\n\t}\n\n\tonUsernameSubmitted(username) {\n\t\tfetch('http://localhost:3001/users', {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t'Content-Type': \"application/json\"\n\t\t\t},\n\t\t\tbody: JSON.stringify({ username }),\n\t\t})\n\t\t.then(res => {\n\t\t\tthis.setState({\n\t\t\t\tcurrentUsername: username,\n\t\t\t\tcurrentScreen: 'Chatscreen'\n\t\t\t})\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.log(error);\n\t\t})\n\t}\n\n    render() {\n    \tif (this.state.currentScreen === 'WhatIsYourUsernameScreen') {\n        \treturn <UsernameForm onSubmit={this.onUsernameSubmitted} />\n    \t} else {\n    \t\treturn <Chatscreen currentUsername={this.state.currentUsername} />\n    \t}\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}